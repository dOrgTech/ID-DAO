{
  "contractName": "IdentityRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_id",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_id",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_id",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_oldMetadata",
          "type": "bytes"
        },
        {
          "indexed": true,
          "name": "_newMetadata",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "address"
        },
        {
          "name": "metadata",
          "type": "bytes"
        },
        {
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "add",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "address"
        },
        {
          "name": "metadata",
          "type": "bytes"
        },
        {
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "removeSelf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "address"
        }
      ],
      "name": "isHuman",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeSelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isHuman\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"bytes\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"bytes\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_metadata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_oldMetadata\",\"type\":\"bytes\"},{\"indexed\":true,\"name\":\"_newMetadata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Luis Dominguez <ld@luis.sh>, Jordan Ellis <jelli@dorg.tech>\",\"details\":\"An Identity Registry contract built off of Registry. Re-exposes functionality in restricting it to the owner. Additional removeSelf() function added, allowing for any registered identity to remove themselves as they wish.\",\"methods\":{\"add(address,bytes,bytes)\":{\"details\":\"Simple add function, adds an address along with metadata associated with the identity. Restricted to owner.\",\"params\":{\"id\":\"address to add\",\"metadata\":\"a hash of the identity metadata definition\",\"sig\":\"the user's signature over this metadata\"}},\"isHuman(address)\":{\"details\":\"Determines whether a passed address is human or not. Checks existence in registry to determine this.\",\"params\":{\"id\":\"address to check\"},\"return\":\"bool Human status of address\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(address)\":{\"details\":\"Simple remove function, removes an address along with metadata associated with the identity. Restricted to owner.\",\"params\":{\"id\":\"address to delete\"}},\"removeSelf()\":{\"details\":\"Allows a registeredidentity to remove themselves from the registry. Restricted to registered identity.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"update(address,bytes,bytes)\":{\"details\":\"Simple update function, updates an address along with metadata associated with the identity. Restricted to owner.\",\"params\":{\"id\":\"address to update\",\"metadata\":\"a hash of the identity metadata definition\",\"sig\":\"the user's signature over this metadata\"}}},\"title\":\"IdentityRegistry\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/IdentityRegistry.sol\":\"IdentityRegistry\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/IdentityRegistry.sol\":{\"keccak256\":\"0x72c4d2430b4a00076c1c96fe9536c9e57a0eeb1db5039a84907a4ac2e366cf5e\",\"urls\":[\"bzzr://c836c9b6bc0232df8f3f20fcb0709a5e15daa3b04028eeeb797ad5a8be3c7b6c\"]},\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/human/HumanContract.sol\":{\"keccak256\":\"0xa8e2523fa7267b89e39fa3d8e3a9942d4dfa6cd1012db9b930ee7be4a71d33fd\",\"urls\":[\"bzzr://e09e49a51730d194c9f7461fd98ef3227a96e577f82789c07391da79a879aef2\"]},\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/human/IVerifyHuman.sol\":{\"keccak256\":\"0xc31c1032355bfb842930c39a68f4352fa36f790b1ec7130fccf0f541bb43e783\",\"urls\":[\"bzzr://e1660eaea4920022eb55ba16080d0027a34b8eab43023117b5d79b593e1d6bf1\"]},\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/registry/ISignedRegistry.sol\":{\"keccak256\":\"0x08f9c9523f9e4eecc0f97bc6e4a0782fcb09b2520468c6509d297e1079e83616\",\"urls\":[\"bzzr://ad56f6f31a337a073263c60ecc41365e3eb4db3cf2428a8aaeeb5f4888d5a702\"]},\"/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/registry/SignedRegistry.sol\":{\"keccak256\":\"0x8f3700489e17358dca08dea15d2df66f2ac997b9edd61bd6a8c517b712aac0fe\",\"urls\":[\"bzzr://54b9a7a2aec6904acab5837d0efa5398f5cace1f3ca4c06dce8aa0227b1d4a73\"]},\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\":{\"keccak256\":\"0xc19027309407a962d4d5f68ad3e5c31eab6ffb6b134dd4811fd0f3d93ffd618a\",\"urls\":[\"bzzr://0fd21475ca178757005990869d51729368cbebd5f0222656141b4fbe5e12a363\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xf79fb10e8235770eb4aea7249034076a3cc9f9119ad944fc48705bae9c9d20dc\",\"urls\":[\"bzzr://d12a11272051eb6586de8f7e0a82c04a98c9984ce8b2a6cf1ee439f65aba29a9\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "576:1829:0:-;;;666:10:7;657:6;;:19;;;;;;;;;;;;;;;;;;724:6;;;;;;;;;;;691:40;;720:1;691:40;;;;;;;;;;;;576:1829:0;;;;;;",
  "deployedSourceMap": "576:1829:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;576:1829:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;975:42:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;975:42:5;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;975:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1787:73:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1787:73:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;2004:75;;;:::i;:::-;;1599:137:7;;;:::i;:::-;;814:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1165:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1885:107;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1885:107:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;2299:104:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2299:104:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1431:159;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1431:159:0;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1431:159:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1431:159:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1431:159:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1431:159:0;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1431:159:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1431:159:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1431:159:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1431:159:0;;;;;;;;;;;;;;;:::i;:::-;;957:153;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;957:153:0;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;957:153:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;957:153:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;957:153:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;957:153:0;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;957:153:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;957:153:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;957:153:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;957:153:0;;;;;;;;;;;;;;;:::i;:::-;;975:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1787:73:0:-;1018:9:7;:7;:9::i;:::-;1010:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1842:11:0;1850:2;1842:7;:11::i;:::-;1787:73;:::o;2004:75::-;429:19:2;437:10;429:7;:19::i;:::-;421:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2053:19:0;2061:10;2053:7;:19::i;:::-;2004:75::o;1599:137:7:-;1018:9;:7;:9::i;:::-;1010:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1697:1;1660:40;;1681:6;;;;;;;;;;;1660:40;;;;;;;;;;;;1727:1;1710:6;;:19;;;;;;;;;;;;;;;;;;1599:137::o;814:77::-;852:7;878:6;;;;;;;;;;;871:13;;814:77;:::o;1165:90::-;1205:4;1242:6;;;;;;;;;;;1228:20;;:10;:20;;;1221:27;;1165:90;:::o;1885:107::-;1018:9;:7;:9::i;:::-;1010:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1957:28;1976:8;1957:18;:28::i;:::-;1885:107;:::o;2299:104:0:-;2349:4;2395:1;2372:8;:12;2381:2;2372:12;;;;;;;;;;;;;;;:19;;;;;;;;;;;;;;;;:24;;2365:31;;2299:104;;;:::o;1431:159::-;1018:9:7;:7;:9::i;:::-;1010:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1557:26:0;1565:2;1569:8;1579:3;1557:7;:26::i;:::-;1431:159;;;:::o;957:153::-;1018:9:7;:7;:9::i;:::-;1010:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1080:23:0;1085:2;1089:8;1099:3;1080:4;:23::i;:::-;957:153;;;:::o;3535:113:5:-;3599:8;:12;3608:2;3599:12;;;;;;;;;;;;;;;3588:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3595:2;3588:24;;;;;;;;;;;;3629:8;:12;3638:2;3629:12;;;;;;;;;;;;;;;;3622:19;;;;:::i;:::-;3535:113;:::o;2093:225:7:-;2186:1;2166:22;;:8;:22;;;;2158:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2275:8;2246:38;;2267:6;;;;;;;;;;;2246:38;;;;;;;;;;;;2303:8;2294:6;;:17;;;;;;;;;;;;;;;;;;2093:225;:::o;3956:229:5:-;4072:2;4076:8;4086:3;1371:1;1355:18;;:4;:18;;;;1347:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1495:4;1438:61;;:53;1487:3;1438:40;1448:4;1438:15;;;;;;:38;:40::i;:::-;:48;;:53;;;;:::i;:::-;:61;;;1417:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4131:8;4106:39;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;51:19;36:153;;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4106:39:5;;;;;;;;;;;;;;;;4117:8;:12;4126:2;4117:12;;;;;;;;;;;;;;;4106:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4113:2;4106:39;;;4141:3;4106:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4106:39:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4170:8;4155;:12;4164:2;4155:12;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:::i;:::-;;3956:229;;;;;;:::o;3137:209::-;3250:2;3254:8;3264:3;1371:1;1355:18;;:4;:18;;;;1347:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1495:4;1438:61;;:53;1487:3;1438:40;1448:4;1438:15;;;;;;:38;:40::i;:::-;:48;;:53;;;;:::i;:::-;:61;;;1417:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3292:8;3284:22;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;51:19;36:153;;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3284:22:5;;;;;;;;;;;;;;;;3288:2;3284:22;;;3302:3;3284:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3284:22:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3331:8;3316;:12;3325:2;3316:12;;;;;;;;;;;;;;;:23;;;;;;;;;;;;:::i;:::-;;3137:209;;;;;;:::o;3386:265:6:-;3455:7;3638:4;3585:58;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3585:58:6;;;3575:69;;;;;;3568:76;;3386:265;;;:::o;1229:1891::-;1307:7;1388:2;1368:9;:16;:22;;1364:72;;;1422:1;1406:19;;;;1364:72;1502:9;1521;1540:7;1786:4;1775:9;1771:20;1765:27;1760:32;;1831:4;1820:9;1816:20;1810:27;1805:32;;1884:4;1873:9;1869:20;1863:27;1860:1;1855:36;1850:41;;2802:66;2797:1;2789:10;;;:79;2785:127;;;2899:1;2884:17;;;;;;;2785:127;2931:2;2926:1;:7;;;;:18;;;;;2942:2;2937:1;:7;;;;2926:18;2922:66;;;2975:1;2960:17;;;;;;;2922:66;3089:24;3099:4;3105:1;3108;3111;3089:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3089:24:6;;;;;;;;3082:31;;;;;1229:1891;;;;;:::o;576:1829:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./registry/SignedRegistry.sol\";\nimport \"./human/HumanContract.sol\";\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\";\n\n/**\n * @title IdentityRegistry\n * @author Luis Dominguez <ld@luis.sh>, Jordan Ellis <jelli@dorg.tech>\n *\n * @dev An Identity Registry contract built off of Registry. Re-exposes functionality\n * in restricting it to the owner. Additional removeSelf() function added, allowing for\n * any registered identity to remove themselves as they wish.\n */\ncontract IdentityRegistry is SignedRegistry, Ownable, HumanContract {\n\n    /**\n     * @dev Simple add function, adds an address along with metadata associated with the identity.\n     * Restricted to owner.\n     *\n     * @param id address to add\n     * @param metadata a hash of the identity metadata definition\n     * @param sig the user's signature over this metadata\n     */\n    function add(\n        address id,\n        bytes memory metadata,\n        bytes memory sig\n    ) public onlyOwner {\n        _add(id, metadata, sig);\n    }\n\n    /**\n     * @dev Simple update function, updates an address along with metadata associated with the identity.\n     * Restricted to owner.\n     *\n     * @param id address to update\n     * @param metadata a hash of the identity metadata definition\n     * @param sig the user's signature over this metadata\n     */\n    function update(\n        address id,\n        bytes memory metadata,\n        bytes memory sig\n    ) public onlyOwner {\n        _update(id, metadata, sig);\n    }\n\n    /**\n     * @dev Simple remove function, removes an address along with metadata associated with the identity.\n     * Restricted to owner.\n     *\n     * @param id address to delete\n     */\n    function remove(address id) public onlyOwner {\n        _remove(id);\n    }\n\n    /**\n     * @dev Allows a registeredidentity to remove themselves from the registry.\n     * Restricted to registered identity.\n     */\n    function removeSelf() public onlyHuman {\n        _remove(msg.sender);\n    }\n\n    /**\n     * @dev Determines whether a passed address is human or not. Checks existence in registry to determine this.\n     *\n     * @param id address to check\n     * @return bool Human status of address\n     */\n    function isHuman(address id) public view returns (bool) {\n        return registry[id].length != 0;\n    }\n}\n",
  "sourcePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/IdentityRegistry.sol",
  "ast": {
    "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/IdentityRegistry.sol",
    "exportedSymbols": {
      "IdentityRegistry": [
        86
      ]
    },
    "id": 87,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/registry/SignedRegistry.sol",
        "file": "./registry/SignedRegistry.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 393,
        "src": "25:39:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/human/HumanContract.sol",
        "file": "./human/HumanContract.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 169,
        "src": "65:35:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 585,
        "src": "101:63:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/cryptography/ECDSA.sol",
        "file": "openzeppelin-solidity/contracts/cryptography/ECDSA.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 474,
        "src": "165:64:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6,
              "name": "SignedRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 392,
              "src": "605:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SignedRegistry_$392",
                "typeString": "contract SignedRegistry"
              }
            },
            "id": 7,
            "nodeType": "InheritanceSpecifier",
            "src": "605:14:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 8,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 584,
              "src": "621:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$584",
                "typeString": "contract Ownable"
              }
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "621:7:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10,
              "name": "HumanContract",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 168,
              "src": "630:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_HumanContract_$168",
                "typeString": "contract HumanContract"
              }
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "630:13:0"
          }
        ],
        "contractDependencies": [
          168,
          178,
          204,
          392,
          584
        ],
        "contractKind": "contract",
        "documentation": "@title IdentityRegistry\n@author Luis Dominguez <ld@luis.sh>, Jordan Ellis <jelli@dorg.tech>\n * @dev An Identity Registry contract built off of Registry. Re-exposes functionality\nin restricting it to the owner. Additional removeSelf() function added, allowing for\nany registered identity to remove themselves as they wish.",
        "fullyImplemented": true,
        "id": 86,
        "linearizedBaseContracts": [
          86,
          168,
          178,
          584,
          392,
          204
        ],
        "name": "IdentityRegistry",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 28,
              "nodeType": "Block",
              "src": "1070:40:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 23,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "1085:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 24,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "1089:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 25,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17,
                        "src": "1099:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 22,
                      "name": "_add",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "1080:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory,bytes memory)"
                      }
                    },
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1080:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27,
                  "nodeType": "ExpressionStatement",
                  "src": "1080:23:0"
                }
              ]
            },
            "documentation": "@dev Simple add function, adds an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to add\n@param metadata a hash of the identity metadata definition\n@param sig the user's signature over this metadata",
            "id": 29,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 20,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 19,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1060:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1060:9:0"
              }
            ],
            "name": "add",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "979:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15,
                  "name": "metadata",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "999:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "999:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "1030:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 16,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "969:83:0"
            },
            "returnParameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1070:0:0"
            },
            "scope": 86,
            "src": "957:153:0",
            "stateMutability": "nonpayable",
            "superFunction": 290,
            "visibility": "public"
          },
          {
            "body": {
              "id": 46,
              "nodeType": "Block",
              "src": "1547:43:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 41,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "1565:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33,
                        "src": "1569:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "1579:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 40,
                      "name": "_update",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 391,
                      "src": "1557:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory,bytes memory)"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1557:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "1557:26:0"
                }
              ]
            },
            "documentation": "@dev Simple update function, updates an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to update\n@param metadata a hash of the identity metadata definition\n@param sig the user's signature over this metadata",
            "id": 47,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 38,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 37,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1537:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1537:9:0"
              }
            ],
            "name": "update",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1456:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1456:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33,
                  "name": "metadata",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1476:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 32,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1507:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1507:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1446:83:0"
            },
            "returnParameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1547:0:0"
            },
            "scope": 86,
            "src": "1431:159:0",
            "stateMutability": "nonpayable",
            "superFunction": 316,
            "visibility": "public"
          },
          {
            "body": {
              "id": 58,
              "nodeType": "Block",
              "src": "1832:28:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 55,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "1850:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 54,
                      "name": "_remove",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 361,
                      "src": "1842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1842:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "1842:11:0"
                }
              ]
            },
            "documentation": "@dev Simple remove function, removes an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to delete",
            "id": 59,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 52,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 51,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1822:9:0"
              }
            ],
            "name": "remove",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 59,
                  "src": "1803:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1803:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1802:12:0"
            },
            "returnParameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1832:0:0"
            },
            "scope": 86,
            "src": "1787:73:0",
            "stateMutability": "nonpayable",
            "superFunction": 300,
            "visibility": "public"
          },
          {
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "2043:36:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 65,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 599,
                          "src": "2061:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 66,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2061:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 64,
                      "name": "_remove",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 361,
                      "src": "2053:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2053:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "2053:19:0"
                }
              ]
            },
            "documentation": "@dev Allows a registeredidentity to remove themselves from the registry.\nRestricted to registered identity.",
            "id": 70,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 62,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 61,
                  "name": "onlyHuman",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 160,
                  "src": "2033:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2033:9:0"
              }
            ],
            "name": "removeSelf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2023:2:0"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2043:0:0"
            },
            "scope": 86,
            "src": "2004:75:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 84,
              "nodeType": "Block",
              "src": "2355:48:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 82,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 77,
                          "name": "registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 241,
                          "src": "2372:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bytes_storage_$",
                            "typeString": "mapping(address => bytes storage ref)"
                          }
                        },
                        "id": 79,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 78,
                          "name": "id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 72,
                          "src": "2381:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2372:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      },
                      "id": 80,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2372:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 81,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2395:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2372:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 76,
                  "id": 83,
                  "nodeType": "Return",
                  "src": "2365:31:0"
                }
              ]
            },
            "documentation": "@dev Determines whether a passed address is human or not. Checks existence in registry to determine this.\n     * @param id address to check\n@return bool Human status of address",
            "id": 85,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isHuman",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 73,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "2316:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 71,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2316:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2315:12:0"
            },
            "returnParameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "2349:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 74,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2348:6:0"
            },
            "scope": 86,
            "src": "2299:104:0",
            "stateMutability": "view",
            "superFunction": 167,
            "visibility": "public"
          }
        ],
        "scope": 87,
        "src": "576:1829:0"
      }
    ],
    "src": "0:2406:0"
  },
  "legacyAST": {
    "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/IdentityRegistry.sol",
    "exportedSymbols": {
      "IdentityRegistry": [
        86
      ]
    },
    "id": 87,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/registry/SignedRegistry.sol",
        "file": "./registry/SignedRegistry.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 393,
        "src": "25:39:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/jelli/Dev/Repos/dOrg/ID-DAO/dao/contracts/human/HumanContract.sol",
        "file": "./human/HumanContract.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 169,
        "src": "65:35:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 585,
        "src": "101:63:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/cryptography/ECDSA.sol",
        "file": "openzeppelin-solidity/contracts/cryptography/ECDSA.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 87,
        "sourceUnit": 474,
        "src": "165:64:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6,
              "name": "SignedRegistry",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 392,
              "src": "605:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SignedRegistry_$392",
                "typeString": "contract SignedRegistry"
              }
            },
            "id": 7,
            "nodeType": "InheritanceSpecifier",
            "src": "605:14:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 8,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 584,
              "src": "621:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$584",
                "typeString": "contract Ownable"
              }
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "621:7:0"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10,
              "name": "HumanContract",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 168,
              "src": "630:13:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_HumanContract_$168",
                "typeString": "contract HumanContract"
              }
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "630:13:0"
          }
        ],
        "contractDependencies": [
          168,
          178,
          204,
          392,
          584
        ],
        "contractKind": "contract",
        "documentation": "@title IdentityRegistry\n@author Luis Dominguez <ld@luis.sh>, Jordan Ellis <jelli@dorg.tech>\n * @dev An Identity Registry contract built off of Registry. Re-exposes functionality\nin restricting it to the owner. Additional removeSelf() function added, allowing for\nany registered identity to remove themselves as they wish.",
        "fullyImplemented": true,
        "id": 86,
        "linearizedBaseContracts": [
          86,
          168,
          178,
          584,
          392,
          204
        ],
        "name": "IdentityRegistry",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 28,
              "nodeType": "Block",
              "src": "1070:40:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 23,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "1085:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 24,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15,
                        "src": "1089:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 25,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17,
                        "src": "1099:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 22,
                      "name": "_add",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 343,
                      "src": "1080:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory,bytes memory)"
                      }
                    },
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1080:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27,
                  "nodeType": "ExpressionStatement",
                  "src": "1080:23:0"
                }
              ]
            },
            "documentation": "@dev Simple add function, adds an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to add\n@param metadata a hash of the identity metadata definition\n@param sig the user's signature over this metadata",
            "id": 29,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 20,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 19,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1060:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1060:9:0"
              }
            ],
            "name": "add",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "979:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15,
                  "name": "metadata",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "999:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "999:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 29,
                  "src": "1030:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 16,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "969:83:0"
            },
            "returnParameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1070:0:0"
            },
            "scope": 86,
            "src": "957:153:0",
            "stateMutability": "nonpayable",
            "superFunction": 290,
            "visibility": "public"
          },
          {
            "body": {
              "id": 46,
              "nodeType": "Block",
              "src": "1547:43:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 41,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "1565:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 42,
                        "name": "metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33,
                        "src": "1569:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 43,
                        "name": "sig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "1579:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 40,
                      "name": "_update",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 391,
                      "src": "1557:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,bytes memory,bytes memory)"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1557:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "1557:26:0"
                }
              ]
            },
            "documentation": "@dev Simple update function, updates an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to update\n@param metadata a hash of the identity metadata definition\n@param sig the user's signature over this metadata",
            "id": 47,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 38,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 37,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1537:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1537:9:0"
              }
            ],
            "name": "update",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1456:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1456:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33,
                  "name": "metadata",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1476:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 32,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 35,
                  "name": "sig",
                  "nodeType": "VariableDeclaration",
                  "scope": 47,
                  "src": "1507:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1507:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1446:83:0"
            },
            "returnParameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1547:0:0"
            },
            "scope": 86,
            "src": "1431:159:0",
            "stateMutability": "nonpayable",
            "superFunction": 316,
            "visibility": "public"
          },
          {
            "body": {
              "id": 58,
              "nodeType": "Block",
              "src": "1832:28:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 55,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "1850:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 54,
                      "name": "_remove",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 361,
                      "src": "1842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1842:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "1842:11:0"
                }
              ]
            },
            "documentation": "@dev Simple remove function, removes an address along with metadata associated with the identity.\nRestricted to owner.\n     * @param id address to delete",
            "id": 59,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 52,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 51,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 517,
                  "src": "1822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1822:9:0"
              }
            ],
            "name": "remove",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 59,
                  "src": "1803:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1803:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1802:12:0"
            },
            "returnParameters": {
              "id": 53,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1832:0:0"
            },
            "scope": 86,
            "src": "1787:73:0",
            "stateMutability": "nonpayable",
            "superFunction": 300,
            "visibility": "public"
          },
          {
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "2043:36:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 65,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 599,
                          "src": "2061:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 66,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2061:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 64,
                      "name": "_remove",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 361,
                      "src": "2053:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2053:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "2053:19:0"
                }
              ]
            },
            "documentation": "@dev Allows a registeredidentity to remove themselves from the registry.\nRestricted to registered identity.",
            "id": 70,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 62,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 61,
                  "name": "onlyHuman",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 160,
                  "src": "2033:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2033:9:0"
              }
            ],
            "name": "removeSelf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2023:2:0"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2043:0:0"
            },
            "scope": 86,
            "src": "2004:75:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 84,
              "nodeType": "Block",
              "src": "2355:48:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 82,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 77,
                          "name": "registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 241,
                          "src": "2372:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bytes_storage_$",
                            "typeString": "mapping(address => bytes storage ref)"
                          }
                        },
                        "id": 79,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 78,
                          "name": "id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 72,
                          "src": "2381:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2372:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage",
                          "typeString": "bytes storage ref"
                        }
                      },
                      "id": 80,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2372:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 81,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2395:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2372:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 76,
                  "id": 83,
                  "nodeType": "Return",
                  "src": "2365:31:0"
                }
              ]
            },
            "documentation": "@dev Determines whether a passed address is human or not. Checks existence in registry to determine this.\n     * @param id address to check\n@return bool Human status of address",
            "id": 85,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isHuman",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 73,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72,
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "2316:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 71,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2316:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2315:12:0"
            },
            "returnParameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 85,
                  "src": "2349:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 74,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2348:6:0"
            },
            "scope": 86,
            "src": "2299:104:0",
            "stateMutability": "view",
            "superFunction": 167,
            "visibility": "public"
          }
        ],
        "scope": 87,
        "src": "576:1829:0"
      }
    ],
    "src": "0:2406:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {
    "1568578677385": {
      "events": {},
      "links": {},
      "address": "0xDc8c66f1dBeC44B67Ec6983aF24fF33b727B8722",
      "transactionHash": "0xf11fde9ded6af3ae84fa31f21ae0d2333fef728eac6c7a09fc54fc19ed910083"
    },
    "1568581405612": {
      "events": {},
      "links": {},
      "address": "0xd13cc308C9825d7708C2Ffe368883B908b121e7C",
      "transactionHash": "0x929c5baa88b78c5a627c78670bb3edfe523c7f3463c51b5b7c2b8c208db4a288"
    },
    "1568581431992": {
      "events": {},
      "links": {},
      "address": "0x0347E7ab0Ef87FCf57D00EB4A9642be2870d325e",
      "transactionHash": "0x3ed287918bbb1fae716dfc19cb2b5d53175cd8974f543c4f2a743529bb08ef65"
    },
    "1568585134111": {
      "events": {},
      "links": {},
      "address": "0x05DBC1EE1BFe0Aab146435D1EFD7271A96d750fD",
      "transactionHash": "0xe75c60a9e35665dbd8f7d18f82830f895404c89e5b306ab17ca338f1e2b5ef20"
    },
    "1568586628722": {
      "events": {},
      "links": {},
      "address": "0x3014Df5B4F13581C5fcb920e99ff9ed0475585C1",
      "transactionHash": "0xf4689239365e540255c31d45b2e611c0f81fdb9d1fa6954ebc743af4ba6d4049"
    },
    "1568587507153": {
      "events": {},
      "links": {},
      "address": "0x39a5755cAe8562D8e178421cb97359337911E3a4",
      "transactionHash": "0x9b120810e10e0f28e0eb02f00c951e83369a5a616d05910a954afca193e89046"
    },
    "1568588045896": {
      "events": {},
      "links": {},
      "address": "0xC27F85EbBeeE55Fd61a08316Ba22172E230d620B",
      "transactionHash": "0x0b9361203d18bab82dd5e9c2b2bfd8b4e5a209a78d6f20cf9f8db91f378ed42f"
    },
    "1568591022310": {
      "events": {},
      "links": {},
      "address": "0x576890df86aaCC339E53394a6538a474cfF17422",
      "transactionHash": "0xe0139ce30dfd30d5d4881eff649c4623b4f2dd9d13bdcc94725ed378bcad4a0f"
    },
    "1568591650938": {
      "events": {},
      "links": {},
      "address": "0x73A0bD33eA1122886619A60D87DfACE8B47E1663",
      "transactionHash": "0xe05a59173b4fb4b43ea8960e9c849b42ee09cf5d88996c70a51199b7f7d81493"
    },
    "1568592768146": {
      "events": {},
      "links": {},
      "address": "0x735aC02D40300b9Daa2933CcE0e884d9bd8b2CBc",
      "transactionHash": "0x4abdebbdfeeee5713e73bdd4126b68fd3d1c909b0d60de21b265ddd3f7f8ec83"
    },
    "1568592850485": {
      "events": {},
      "links": {},
      "address": "0xe1d591b21Cc4dbBB1f35D23F200B5c5E3399775b",
      "transactionHash": "0x05836ff12b5d6e9f079a26b3ed1a6761493c4da8c663d48a3fe41ef316a24af6"
    },
    "1568597408185": {
      "events": {},
      "links": {},
      "address": "0xb2A91eEA34bc2dA3475188b155711Db90cD8D5Ca",
      "transactionHash": "0x9affd588ffa57ee099f1d888e80caa1e43191b34c1f9738de662588ef7a80550"
    },
    "1568601674173": {
      "events": {},
      "links": {},
      "address": "0x68377f466aC37F0489225f2fE8794AD7D3aF5f4e",
      "transactionHash": "0x11e73376f7d8d5172008df91bd1af766dd661a082337581857014d43940021b0"
    },
    "1568602976853": {
      "events": {},
      "links": {},
      "address": "0x40851121B8046eD79A02bBE69c6968366AbEbaf5",
      "transactionHash": "0xa7706cc9117c0bc43a62aa9c963fbeb300fc0a159f4a0f0724631c46f135ed10"
    },
    "1568604090056": {
      "events": {},
      "links": {},
      "address": "0xa462cDc6f943B5685029A59BE0ADcB3CBa9DA670",
      "transactionHash": "0x5b891978391f54c1d3a2e6b0c6a2a987517b39acf6f72b00f5cbb64987165d5a"
    },
    "1568606782670": {
      "events": {},
      "links": {},
      "address": "0x7EC7336739D268a16A1E231399F09f83F435dB37",
      "transactionHash": "0x125318e8f5bc80e07afe189fd6aa8e4104f2f17f0be19093f11785b32d5c00d7"
    }
  },
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-09-16T04:06:25.084Z",
  "devdoc": {
    "author": "Luis Dominguez <ld@luis.sh>, Jordan Ellis <jelli@dorg.tech>",
    "details": "An Identity Registry contract built off of Registry. Re-exposes functionality in restricting it to the owner. Additional removeSelf() function added, allowing for any registered identity to remove themselves as they wish.",
    "methods": {
      "add(address,bytes,bytes)": {
        "details": "Simple add function, adds an address along with metadata associated with the identity. Restricted to owner.",
        "params": {
          "id": "address to add",
          "metadata": "a hash of the identity metadata definition",
          "sig": "the user's signature over this metadata"
        }
      },
      "isHuman(address)": {
        "details": "Determines whether a passed address is human or not. Checks existence in registry to determine this.",
        "params": {
          "id": "address to check"
        },
        "return": "bool Human status of address"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(address)": {
        "details": "Simple remove function, removes an address along with metadata associated with the identity. Restricted to owner.",
        "params": {
          "id": "address to delete"
        }
      },
      "removeSelf()": {
        "details": "Allows a registeredidentity to remove themselves from the registry. Restricted to registered identity."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "update(address,bytes,bytes)": {
        "details": "Simple update function, updates an address along with metadata associated with the identity. Restricted to owner.",
        "params": {
          "id": "address to update",
          "metadata": "a hash of the identity metadata definition",
          "sig": "the user's signature over this metadata"
        }
      }
    },
    "title": "IdentityRegistry"
  },
  "userdoc": {
    "methods": {}
  }
}